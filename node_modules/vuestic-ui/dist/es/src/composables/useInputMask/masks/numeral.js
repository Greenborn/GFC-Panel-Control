import { c as createRegexMask } from "./regex.js";
const DECIMAL = ".";
const createNumeralMask = () => {
  const intMask = createRegexMask(/(\d{3} )*(\d{3})/, { reverse: true });
  const decimalMask = createRegexMask(/(\d{3} )*(\d{3})/, { reverse: false });
  return {
    format: (text) => {
      const hasDecimal = text.includes(DECIMAL);
      if (!hasDecimal) {
        return intMask.format(text);
      }
      const [int = "", decimal = "", ...rest] = text.split(DECIMAL);
      const intResult = intMask.format(int);
      const decimalResult = decimalMask.format(decimal + rest.join(""));
      return {
        text: intResult.text + DECIMAL + decimalResult.text,
        tokens: [...intResult.tokens, { type: "char", static: false, expect: DECIMAL, isDecimal: true }, ...decimalResult.tokens]
      };
    },
    handleCursor(selectionStart, selectionEnd, oldTokens, newTokens, data) {
      const decimalIndex = newTokens.findIndex((token) => token.isDecimal);
      if (decimalIndex === -1) {
        return intMask.handleCursor(selectionStart, selectionEnd, oldTokens, newTokens, data);
      }
      if (selectionStart.position < decimalIndex) {
        intMask.handleCursor(selectionStart, selectionEnd, oldTokens, newTokens, data);
      } else {
        decimalMask.handleCursor(selectionStart, selectionEnd, oldTokens, newTokens, data);
      }
    },
    unformat: (text, tokens) => {
      return parseFloat(text.replace(/ /g, "")).toString();
    }
  };
};
export {
  createNumeralMask as c
};
//# sourceMappingURL=numeral.js.map
